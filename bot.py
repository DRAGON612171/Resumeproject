import telebot
from telebot.types import InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup
import random
import string
from Resumeproject.app.main_db import writeTable

bot = telebot.TeleBot("6146197636:AAH-kokmD73gVwykAEOiqA4saLgPoRuV0x4")

profession = ''
name_surname = ''
phone_number = ''
email = ''
education = list()
tech_skills = list()
soft_skills = list()
projects = list()
lang = list()
lang_level = list()
country = ''
city = ''
work_experience = list()
user_id = ''
rand_password = ''
description = ''
how_long = list()
job_description = list()
update = False
next_step = False



def but_create():
    reply_markup = ReplyKeyboardMarkup(resize_keyboard=True)
    but1 = KeyboardButton('üìÑ–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑—é–º–µüìÑ')
    reply_markup.add(but1)
    return reply_markup


def generate_password():
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for i in range(8))


@bot.message_handler(commands=['start'])
def start(message):
    global user_id
    user_id = message.chat.id
    bot.send_message(message.chat.id, 'üëã–ü—Ä–∏–≤—ñ—Ç,{}!üëã\n'
                                      'üòÉ–¶–µ –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑—é–º–µ, –¥—É–º–∞—é —Ç–æ–±—ñ —Å–ø–æ–¥–æ–±–∞—î—Ç—å—Å—èüòÉ'.format(message.from_user.first_name), reply_markup=but_create())
    print(user_id, message)


@bot.message_handler(content_types=['text'])
def message_reply(message):
    global user_id
    user_id = message.chat.id
    if message.text == 'üìÑ–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑—é–º–µüìÑ':
        reply_markup1 = ReplyKeyboardMarkup(resize_keyboard=True)
        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è —ñ –ø—Ä—ñ–∑–≤–∏—â–µ', reply_markup=reply_markup1)
        bot.register_next_step_handler(msg, get_name_surname)


def get_name_surname(message):
    global name_surname, update
    if not update:
        if message.text == '-':
            pass
        elif message.text == '/start':
            start(message)
        else:
            name_surname = message.text
        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É')
        bot.register_next_step_handler(msg, get_phone_number)
    elif update:
        if message.text == '-':
            pass
        elif message.text == '/start':
            start(message)
        else:
            name_surname = message.text
            bot.send_message(message.chat.id, '–•–æ—á–µ—Ç–µ —â–µ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=end_keyboard())
            update = False
    print('surname =', name_surname)


def get_phone_number(message):
    global phone_number, update
    if not update:
        if message.text == '-':
            pass
        elif message.text == '/start':
            start(message)
        else:
            phone_number = message.text
        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à email')
        bot.register_next_step_handler(msg, get_email)
    elif update:
        if message.text == '-':
            pass
        elif message.text == '/start':
            start(message)
        else:
            phone_number = message.text
            bot.send_message(message.chat.id, '–•–æ—á–µ—Ç–µ —â–µ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=end_keyboard())
            update = False
    print('phone number = ', phone_number)


def get_email(message):
    global email, update
    if not update:
        if message.text == '-':
            pass
        elif message.text == '/start':
            start(message)
        else:
            email = message.text
        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à—É –æ—Å–≤—ñ—Ç—É', reply_markup=next_step_but())
        bot.register_next_step_handler(msg, get_education)
    elif update:
        if message.text == '-':
            pass
        elif message.text == '/start':
            start(message)
        else:
            email = message.text
            bot.send_message(message.chat.id, '–•–æ—á–µ—Ç–µ —â–µ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=end_keyboard())
            update = False
    print('email = ', email)


def get_education(message):
    global education, update, next_step
    next_step = False
    if not next_step:
        if not update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                education.append(message.text)
            bot.register_next_step_handler(bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø—É–Ω–∫—Ç'), get_education)
        elif update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                education = message.text
                bot.send_message(message.chat.id, '–•–æ—á–µ—Ç–µ —â–µ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=end_keyboard())
                update = False

    print('education =', education)


def get_tech_skills(message):
    global tech_skills, update, next_step
    next_step = False
    if not next_step:
        if not update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                tech_skills.append(message.text)
            bot.register_next_step_handler(bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø—É–Ω–∫—Ç'), get_tech_skills)
        elif update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                tech_skills = message.text
                bot.send_message(message.chat.id, '–•–æ—á–µ—Ç–µ —â–µ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=end_keyboard())
                update = False

    print('tech skills = ', tech_skills)


def get_soft_skills(message):
    global soft_skills, update, next_step
    next_step = False
    if not next_step:
        if not update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                soft_skills.append(message.text)
            bot.register_next_step_handler(bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø—É–Ω–∫—Ç'), get_soft_skills)
        elif update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                soft_skills = message.text
                bot.send_message(message.chat.id, '–•–æ—á–µ—Ç–µ —â–µ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=end_keyboard())
                update = False

    print('soft_skills = ', soft_skills)


def get_projects(message):
    global projects, update, next_step
    next_step = False
    if not next_step:
        if not update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                projects.append(message.text)
            bot.register_next_step_handler(bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø—É–Ω–∫—Ç'), get_projects)
        elif update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                projects = message.text
                bot.send_message(message.chat.id, '–•–æ—á–µ—Ç–µ —â–µ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=end_keyboard())
                update = False
    print('projects = ', projects)


def get_lang(message):
    global lang, update, next_step
    next_step = False
    if not next_step:
        if not update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                lang.append(message.text)
            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –∑–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –º–æ–≤–∏')
            bot.register_next_step_handler(msg, get_lang_level)
        elif update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                lang = message.text
                bot.send_message(message.chat.id, '–•–æ—á–µ—Ç–µ —â–µ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=end_keyboard())
                update = False
    print('lang = ', lang)


def get_lang_level(message):
    global lang_level, update, next_step
    next_step = False
    if not next_step:
        if not update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                lang_level.append(message.text)
            bot.register_next_step_handler(bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –º–æ–≤—É —è–∫—É –≤–∏ –∑–Ω–∞—î—Ç–µ', reply_markup=next_step_but6()), get_lang)
        elif update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                lang_level = message.text
                bot.send_message(message.chat.id, '–•–æ—á–µ—Ç–µ —â–µ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=end_keyboard())
                update = False
    print('lang_level = ', lang_level)


def get_country(message):
    global country, update
    if not update:
        if message.text == '-':
            pass
        elif message.text == '/start':
            start(message)
        else:
            country = message.text
        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤ —è–∫–æ–º—É –º—ñ—Å—Ç—ñ –≤–∏ –∂–∏–≤–µ—Ç–µ')
        bot.register_next_step_handler(msg, get_city)
    elif update:
        if message.text == '-':
            pass
        elif message.text == '/start':
            start(message)
        else:
            country = message.text
            bot.send_message(message.chat.id, '–•–æ—á–µ—Ç–µ —â–µ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=end_keyboard())
            update = False
    print('country =', country)


def get_city(message):
    global city, update
    if not update:
        if message.text == '-':
            pass
        elif message.text == '/start':
            start(message)
        else:
            city = message.text
        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞ —è–∫—É –ø–æ—Å–∞–¥—É –ø—Ä–µ—Ç–µ–Ω–¥—É—î—Ç–µ')
        bot.register_next_step_handler(msg, get_profession)
    elif update:
        if message.text == '-':
            pass
        elif message.text == '/start':
            start(message)
        else:
            city = message.text
            bot.send_message(message.chat.id, '–•–æ—á–µ—Ç–µ —â–µ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=end_keyboard())
            update = False
    print('city =', city)


def get_profession(message):
    global profession, update
    if not update:
        if message.text == '-':
            pass
        elif message.text == '/start':
            start(message)
        else:
            profession = message.text
        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥ —Ä–æ–±–æ—Ç–∏(–º–æ–∂–µ—Ç–µ —â–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ —ñ–Ω—à—ñ —Ñ–∞–∫—Ç–∏ –ø—Ä–æ —Å–µ–±–µ)')
        bot.register_next_step_handler(msg, get_description)
    elif update:
        if message.text == '-':
            pass
        elif message.text == '/start':
            start(message)
        else:
            profession = message.text
            bot.send_message(message.chat.id, '–•–æ—á–µ—Ç–µ —â–µ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=end_keyboard())
            update = False
    print('profession =', profession)


def get_description(message):
    global description, update
    if not update:
        if message.text == '-':
            pass
        elif message.text == '/start':
            start(message)
        else:
            description = message.text
        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ—é –º–∏–Ω—É–ª–æ—ó –ø–æ—Å–∞–¥–∏', reply_markup=next_step_but7())
        bot.register_next_step_handler(msg, get_work_experience)
    elif update:
        if message.text == '-':
            pass
        elif message.text == '/start':
            start(message)
        else:
            description = message.text
            bot.send_message(message.chat.id, '–•–æ—á–µ—Ç–µ —â–µ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=end_keyboard())
            update = False

    print('description =', description)


def get_work_experience(message):
    global work_experience, update, next_step
    next_step = False
    if not next_step:
        if not update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                work_experience.append(message.text)
            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å, —â–æ —Ä–æ–±–∏–ª–∏ –Ω–∞ —Ü—ñ–π —Ä–æ–±–æ—Ç—ñ')
            bot.register_next_step_handler(msg, get_job_description)
        elif update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                work_experience = message.text
                bot.send_message(message.chat.id, '–•–æ—á–µ—Ç–µ —â–µ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=end_keyboard())
                update = False
    print('work_experience =', work_experience)


def get_job_description(message):
    global job_description, update, next_step
    next_step = False
    if not next_step:
        if not update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                job_description.append(message.text)
            bot.register_next_step_handler(bot.send_message(message.chat.id, '–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤–∏ –∑–∞–π–º–∞–ª–∏ —Ü—é –ø–æ—Å–∞–¥—É?'), get_how_long)
        elif update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                job_description = message.text
                bot.send_message(message.chat.id, '–•–æ—á–µ—Ç–µ —â–µ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=end_keyboard())
                update = False

    print('job_description =', job_description)


def get_how_long(message):
    global how_long, update, next_step
    if not next_step:
        if not update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                how_long.append(message.text)
            msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø—É–Ω–∫—Ç')
            bot.register_next_step_handler(msg, get_work_experience)
        elif update:
            if message.text == '-':
                pass
            elif message.text == '/start':
                start(message)
            else:
                how_long = message.text
                bot.send_message(message.chat.id, '–•–æ—á–µ—Ç–µ —â–µ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=end_keyboard())
                update = False
    print('how_long =', how_long)


def next_step_but():
    markup = InlineKeyboardMarkup(row_width=1)
    but = InlineKeyboardButton('–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', callback_data='20')
    markup.add(but)
    return markup


def next_step_but2():
    markup = InlineKeyboardMarkup(row_width=1)
    but = InlineKeyboardButton('–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', callback_data='21')
    markup.add(but)
    return markup


def next_step_but3():
    markup = InlineKeyboardMarkup(row_width=1)
    but = InlineKeyboardButton('–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', callback_data='22')
    markup.add(but)
    return markup


def next_step_but4():
    markup = InlineKeyboardMarkup(row_width=1)
    but = InlineKeyboardButton('–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', callback_data='23')
    markup.add(but)
    return markup


def next_step_but6():
    markup = InlineKeyboardMarkup(row_width=1)
    but = InlineKeyboardButton('–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', callback_data='25')
    markup.add(but)
    return markup


def next_step_but7():
    markup = InlineKeyboardMarkup(row_width=1)
    but = InlineKeyboardButton('–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', callback_data='26')
    markup.add(but)
    return markup


def next_step_but8():
    markup = InlineKeyboardMarkup(row_width=1)
    but = InlineKeyboardButton('–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', callback_data='27')
    markup.add(but)
    return markup


def end_keyboard():
    markup = InlineKeyboardMarkup(row_width=1)
    but1 = InlineKeyboardButton('–¢–∞–∫', callback_data='15')
    but2 = InlineKeyboardButton('–ù—ñ', callback_data='16')
    markup.add(but1, but2)
    return markup


def changes():
    markup = InlineKeyboardMarkup(row_width=1)
    but1 = InlineKeyboardButton("üòÉ–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µüòÉ", callback_data='1')
    but2 = InlineKeyboardButton("‚òé–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É‚òéÔ∏è", callback_data='2')
    but3 = InlineKeyboardButton("üìßEmailüìß", callback_data='3')
    but4 = InlineKeyboardButton("üßê–û—Å–≤—ñ—Ç–∞üßê", callback_data='4')
    but5 = InlineKeyboardButton("üòÑSoft –ù–∞–≤–∏—á–∫–∏üòÑ", callback_data='5')
    but14 = InlineKeyboardButton("üòÑTech –ù–∞–≤–∏—á–∫–∏üòÑ", callback_data='14')
    but6 = InlineKeyboardButton("üò≤–ü—Ä–æ–µ–∫—Ç–∏üò≤", callback_data='6')
    but7 = InlineKeyboardButton("‚úå–ú–æ–≤–∏‚úåÔ∏è", callback_data='7')
    but8 = InlineKeyboardButton("üó£–†—ñ–≤–µ–Ω—å –º–æ–≤–∏üó£", callback_data='8')
    but9 = InlineKeyboardButton("üëç–ö—Ä–∞—ó–Ω–∞üëç", callback_data='9')
    but10 = InlineKeyboardButton("ü§ü–ú—ñ—Å—Ç–æü§ü", callback_data='10')
    but11 = InlineKeyboardButton("üë®‚Äçüéì–ü—Ä–æ—Ñ–µ—Å—ñ—èüë®‚Äçüéì", callback_data='11')
    but12 = InlineKeyboardButton("üò±–û—á—ñ–∫—É–≤–∞–Ω–Ω—èüò±", callback_data='12')
    but13 = InlineKeyboardButton("ü§Ø–î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ü§Ø", callback_data='13')
    but17 = InlineKeyboardButton("üò±–í–∞—à–∞ —Ä–æ–±–æ—Ç–∞ –Ω–∞ –º–∏–Ω—É–ª—ñ–π –ø–æ—Å–∞–¥—ñüò±", callback_data='17')
    but18 = InlineKeyboardButton("ü§Ø–¢–µ—Ä–º—ñ–Ω –≤–∞—à–æ—ó –º–∏–Ω—É–ª–æ—ó —Ä–æ–±–æ—Ç–∏ü§Ø", callback_data='18')
    markup.add(but1, but2, but3, but4, but5, but6, but7, but8, but9, but10, but11, but12, but13, but14, but17, but18)
    return markup


@bot.callback_query_handler(func=lambda c: True)
def go_changes(call):
    global update, rand_password, next_step
    if call.data == '15':
        bot.send_message(call.from_user.id, '–©–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?', reply_markup=changes())
    if call.data == '16':
        rand_password = generate_password()
        writeTable(user_id, name_surname, phone_number, email, education, lang, lang_level, country, city, rand_password,
                description, profession, soft_skills, tech_skills, projects, how_long, job_description, work_experience)
        bot.send_message(call.from_user.id, f"ü•≥–í–∞—à–µ —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–µü•≥\n"
                                            f"ü•∏–û—Å—å –≤–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ —Å–∞–π—Ç—ñ:ü•∏\n"
                                            f"ü§êTelegram ID: {user_id}ü§ê\n"
                                            f"ü§ê–í–∞—à –ø–∞—Ä–æ–ª—å: {rand_password}ü§ê")
    elif call.data == '1':
        update = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è —ñ –ø—Ä—ñ–∑–≤–∏—â–µ')
        bot.register_next_step_handler(msg, get_name_surname)
    if call.data == '2':
        update = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É')
        bot.register_next_step_handler(msg, get_phone_number)
    elif call.data == '3':
        update = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à email')
        bot.register_next_step_handler(msg, get_email)
    if call.data == '4':
        update = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à—É –æ—Å–≤—ñ—Ç—É')
        bot.register_next_step_handler(msg, get_education)
    elif call.data == '5':
        update = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à—ñ Tech –Ω–∞–≤–∏—á–∫–∏')
        bot.register_next_step_handler(msg, get_tech_skills)
    if call.data == '6':
        update = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∏—Ö')
        bot.register_next_step_handler(msg, get_projects)
    elif call.data == '7':
        update = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å —è–∫–∏–º–∏ –º–æ–≤–∞–º–∏ –≤–∏ –≤–æ–ª–æ–¥—ñ—î—Ç–µ')
        bot.register_next_step_handler(msg, get_lang)
    if call.data == '8':
        update = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –∑–Ω–∞–Ω–Ω—è —Ü–∏—Ö –º–æ–≤')
        bot.register_next_step_handler(msg, get_lang_level)
    elif call.data == '9':
        update = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤ —è–∫—ñ–π –∫—Ä–∞—ó–Ω—ñ –≤–∏ –∂–∏–≤–µ—Ç–µ')
        bot.register_next_step_handler(msg, get_country)
    if call.data == '10':
        update = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤ —è–∫–æ–º—É –º—ñ—Å—Ç—ñ –≤–∏ –∂–∏–≤–µ—Ç–µ')
        bot.register_next_step_handler(msg, get_city)
    elif call.data == '11':
        update = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞ —è–∫—É –ø–æ—Å–∞–¥—É –ø—Ä–µ—Ç–µ–Ω–¥—É—î—Ç–µ')
        bot.register_next_step_handler(msg, get_profession)
    if call.data == '12':
        update = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥ —Ä–æ–±–æ—Ç–∏')
        bot.register_next_step_handler(msg, get_description)
    elif call.data == '13':
        update = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à –º–∏–Ω—É–ª–∏–π –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏')
        bot.register_next_step_handler(msg, get_work_experience)
    if call.data == '14':
        update = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à—ñ Soft –Ω–∞–≤–∏—á–∫–∏')
        bot.register_next_step_handler(msg, get_soft_skills)
    elif call.data == '17':
        update = True
        msg = bot.send_message(call.from_user.id, '–©–æ –≤–∏ —Ä–æ–±–∏–ª–∏ –Ω–∞ —Ü—ñ–π –ø–æ—Å–∞–¥—ñ')
        bot.register_next_step_handler(msg, get_job_description)
    if call.data == '18':
        update = True
        msg = bot.send_message(call.from_user.id, '–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤–∏ –∑–∞–π–º–∞–ª–∏ —Ü—é –ø–æ—Å–∞–¥—É?')
        bot.register_next_step_handler(msg, get_how_long)
    elif call.data == '20':
        next_step = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à—ñ Tech Skills', reply_markup=next_step_but2())
        bot.clear_step_handler(msg)
        bot.register_next_step_handler(msg, get_tech_skills)
    if call.data == '21':
        next_step = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ Soft Skills', reply_markup=next_step_but3())
        bot.clear_step_handler(msg)
        bot.register_next_step_handler(msg, get_soft_skills)
    elif call.data == '22':
        next_step = True
        msg = bot.send_message(call.from_user.id, '–í—Å—Ç–∞–≤—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏', reply_markup=next_step_but4())
        bot.clear_step_handler(msg)
        bot.register_next_step_handler(msg, get_projects)
    if call.data == '23':
        next_step = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å —è–∫–∏–º–∏ –º–æ–≤–∞–º–∏ –≤–∏ –≤–æ–ª–æ–¥—ñ—î—Ç–µ', reply_markup=next_step_but6())
        bot.clear_step_handler(msg)
        bot.register_next_step_handler(msg, get_lang)
    elif call.data == '26':
        bot.send_message(call.from_user.id, "üòé–í–∞—à–µ —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–µ, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—ó –¥–∞–Ω—ñ:üòé\n"
                                          f"–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–∏–≤—â–µ: {name_surname}\n"
                                          f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number}\n"
                                          f"–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞: {email}\n"
                                          f"–û—Å–≤—ñ—Ç–∞: {education}\n"
                                          f"Tech –ù–∞–≤–∏—á–∫–∏: {tech_skills}\n"
                                          f"Soft –ù–∞–≤–∏—á–∫–∏: {soft_skills}\n"
                                          f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏: {projects}\n"
                                          f"–ú–æ–≤–∏: {lang}\n"
                                          f"–†—ñ–≤–µ–Ω—å –∑–Ω–∞–Ω–Ω—è —Ü–∏—Ö –º–æ–≤: {lang_level}\n"
                                          f"–í–∞—à–∞ –∫—Ä–∞—ó–Ω–∞: {country}\n"
                                          f"–í–∞—à–µ –º—ñ—Å—Ç–æ: {city}\n"
                                          f"–ü–æ—Å–∞–¥–∞ –Ω–∞ —è–∫—É –ø—Ä–µ—Ç–µ–Ω–¥—É—î—Ç–µ: {profession}\n"
                                          f"–í–∞—à—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥ —Ä–æ–±–æ—Ç–∏: {description}\n"
                                          f"–í–∞—à–∞ –º–∏–Ω—É–ª–∏–π  –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏: {work_experience}\n"
                                          f"–©–æ –≤–∏ —Ä–æ–±–∏–ª–∏ –Ω–∞ —Ü—ñ–π –ø–æ—Å–∞–¥—ñ: {job_description}\n"
                                          f"–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤–∏ –∑–∞–π–º–∞–ª–∏ —Ü—é –ø–æ—Å–∞–¥—É: {how_long}\n"
                                          "–ß–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ?'\n", reply_markup=end_keyboard())

    if call.data == '25':
        next_step = True
        msg = bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ—ó –≤–∏ –∫—Ä–∞—ó–Ω–∏')
        bot.clear_step_handler(msg)
        bot.register_next_step_handler(msg, get_country)


bot.polling(none_stop=True)
