import time
import telebot
from telebot.types import InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import random
import string
from db import readTable, writeTable

bot = telebot.TeleBot("5662928795:AAHhdf4WxBx_CGY1x5CU85Y5qR06Y3UgcFQ")

profession = ''
name = ''
surname = ''
phone_number = ''
email = ''
education = ''
skills = list()
projects = list()
lang = list()
lang_level = list()
country = ''
city = ''
past_work = ''
user_id = ''
rand_password = ''
description = ''

#–£ –∫—ñ–Ω—Ü—ñ —Ç—Ä–µ–±–∞ –≤–∏–≤–µ—Å—Ç–∏ –≤—Å—ñ –¥–∞–Ω–Ω—ñ, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—Å–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏–≤

def but_create():
    reply_markup = ReplyKeyboardMarkup(resize_keyboard=True)
    but1 = KeyboardButton('üìÑ–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑—é–º–µüìÑ')
    reply_markup.add(but1)
    return reply_markup


def generate_password():
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for i in range(8))


@bot.message_handler(commands=['start'])                            #–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É, —â–æ–± —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ(–∞–±–æ –∫–µ–π–±–æ—Ä–¥ –∫–Ω–æ–ø–∫–æ—é)
def start(message):
    global user_id
    user_id = message.chat.id
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤—ñ—Ç,{}!\n '
                                      '–¶–µ –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑—é–º–µ, –¥—É–º–∞—é —Ç–æ–±—ñ —Å–ø–æ–¥–æ–±–∞—î—Ç—å—Å—è'.format(message.from_user.first_name), reply_markup=but_create())
    print(user_id, message)


@bot.message_handler(content_types=['text'])
def message_reply(message):
    global name
    global user_id
    user_id = message.chat.id
    if message.text == 'üìÑ–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑—é–º–µüìÑ':
        reply_markup1 = ReplyKeyboardMarkup(resize_keyboard=True)
        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è', reply_markup=reply_markup1)
        bot.register_next_step_handler(msg, get_user_name)


def get_user_name(message):
    global name
    msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ')
    if message.text == '-':
        bot.register_next_step_handler(msg, get_surname)
    elif message.text == '/start':
        bot.clear_step_handler(message)
        start(message)
    else:
        name = message.text
        bot.register_next_step_handler(msg, get_surname)
    print('name = ', name)


def get_surname(message):
    global surname
    msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É')
    if message.text == '-':
        bot.register_next_step_handler(msg, get_phone_number)
    elif message.text == '/start':
        bot.clear_step_handler(message)
        start(message)
    else:
        surname = message.text
        bot.register_next_step_handler(msg, get_phone_number)
    print('surname =', surname)


def get_phone_number(message):
    global phone_number
    msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à email')
    if message.text == '-':
        bot.register_next_step_handler(msg, get_email)
    elif message.text == '/start':
        bot.clear_step_handler(message)
        start(message)
    else:
        phone_number = message.text
        bot.register_next_step_handler(msg, get_email)
    print('phone number = ', phone_number)


def get_email(message):
    global email
    msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à—É –æ—Å–≤—ñ—Ç—É')
    if message.text == '-':
        bot.register_next_step_handler(msg, get_education)
    elif message.text == '/start':
        start(message)
    else:
        email = message.text
        bot.register_next_step_handler(msg, get_education)
    print('email = ', email)


def get_education(message):
    global education
    msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à—ñ –Ω–∞–≤–∏—á–∫–∏')
    if message.text == '-':
        bot.register_next_step_handler(msg, get_skills)
    elif message.text == '/start':
        start(message)
    else:
        education = message.text
        bot.register_next_step_handler(msg, get_skills)
    print('education =', education)


def get_skills(message):
    global skills
    msg = bot.send_message(message.chat.id, '–í—Å—Ç–∞–≤—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏')
    if message.text == '-':
        bot.register_next_step_handler(msg, get_projects)
    elif message.text == '/start':
        start(message)
    else:
        skills = message.text
        bot.register_next_step_handler(msg, get_projects)
    print('skills = ', skills)


def get_projects(message):
    global projects
    msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å —è–∫–∏–º–∏ –º–æ–≤–∞–º–∏ –≤–∏ –≤–æ–ª–æ–¥—ñ—î—Ç–µ')
    if message.text == '-':
        bot.register_next_step_handler(msg, get_lang)
    elif message.text == '/start':
        start(message)
    else:
        projects = message.text
        bot.register_next_step_handler(msg, get_lang)
    print('projects = ', projects)


def get_lang(message):
    global lang
    msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ —Ä—ñ–≤–µ–Ω—å –∑–Ω–∞–Ω–Ω—è —Ü–∏—Ö –º–æ–≤')
    if message.text == '-':
        bot.register_next_step_handler(msg, get_lang_level)
    elif message.text == '/start':
        start(message)
    else:
        lang = message.text
        bot.register_next_step_handler(msg, get_lang_level)
    print('lang = ', lang)


def get_lang_level(message):
    global lang_level
    msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ—ó –≤–∏ –∫—Ä–∞—ó–Ω–∏')
    if message.text == '-':
        bot.register_next_step_handler(msg, get_country)
    elif message.text == '/start':
        start(message)
    else:
        lang_level = message.text
        bot.register_next_step_handler(msg, get_country)
    print('lang_level = ', lang_level)


def get_country(message):
    global country
    msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ–≥–æ –≤–∏ –º—ñ—Å—Ç–∞')
    if message.text == '-':
        bot.register_next_step_handler(msg, get_city)
    elif message.text == '/start':
        start(message)
    else:
        country = message.text
        bot.register_next_step_handler(msg, get_city)
    print('country =', country)


def get_city(message):
    global city
    msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞ —è–∫—É –ø–æ—Å–∞–¥—É –ø—Ä–µ—Ç–µ–Ω–¥—É—î—Ç–µ')
    if message.text == '-':
        bot.register_next_step_handler(msg, get_work_experience)
    elif message.text == '/start':
        start(message)
    else:
        city = message.text
        bot.register_next_step_handler(msg, get_profession)
    print('city =', city)


def get_profession(message):
    global profession
    msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥ —Ä–æ–±–æ—Ç–∏')
    if message.text == '-':
        bot.register_next_step_handler(msg, get_description)
    elif message.text == '/start':
        start(message)
    else:
        profession = message.text
        bot.register_next_step_handler(msg, get_description)
    print('profession =', profession)


def get_description(message):
    global description
    msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à –º–∏–Ω—É–ª–∏–π –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏')
    if message.text == '-':
        bot.register_next_step_handler(msg, get_work_experience)
    elif message.text == '/start':
        start(message)
    else:
        description = message.text
        bot.register_next_step_handler(msg, get_work_experience)
    print('description =', description)


def get_work_experience(message):
    global past_work
    if message.text == '-':
        bot.send_message(message.chat.id, '–í–∞—à–µ —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–µ')
    elif message.text == '/start':
        start(message)
    else:
        past_work = message.text
    bot.send_message(message.chat.id, '–í–∞—à–µ —Ä–µ–∑—é–º–µ –º–∞–π–∂–µ –≥–æ—Ç–æ–≤–µ, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—ó –¥–∞–Ω—ñ:')
    rand_password = generate_password()
    writeTable(user_id, name, surname, phone_number, email, education, skills, projects, lang, lang_level, country, city, past_work, rand_password, description, profession)
    print('work_experience = ', past_work)
    print('password = ', rand_password)


bot.polling(none_stop=True)
